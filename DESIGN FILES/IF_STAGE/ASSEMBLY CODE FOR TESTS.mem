

ARITHMETIC TEST:

    ORI $t0 $zero 0x0002
    ORI $t1 $zero 0x0005
    SUB $t0 $t0 $t1
    ADD $t2 $t0 $t1
    ADDU $t3 $t0 $t1
    SUB $t4 $t0 $t1
    SUBU $t5 $t0 $t1
    ADDI $t6 $t0 0x0004

    IF TEST GOES WELL:
        EXPECT:
            t0 / R8 = 0xFFFF_FFFD
            t1 / R9 = 0x0005
            t2 / R10 = 0x0002
            t3 / R11 = 0x0002
            t4 / R12 = 0xFFFF_FFF8
            t5 / R13 = 0xFFFF_FFF8
            t6 / R14 = 0x0001

BITWISE TEST:

    ADDI $v0 $zero 0x00FF
    SRL $v1 $v0 0x0001
    SLL $a0 $v1 0x0010
    SRL $a1 $a0 0x0011
    
    IF TEST GOES WELL:
        EXPECT:
            v0 / R2 = 0x00FF
            v1 / R3 = 0x007F
            a0 / R4 = 0x007F_0000
            a1 / R5 = 0x003F
    
BRANCHING TEST:

    ADDI $v0 $zero 0x0004   -- v0 should equal 4
    ADDI $v1 $zero 0x0004   -- v1 should equal 4
    BEQ  $v0 $v1   0x0002   -- skip next two lines if v0 = v1 (should be the case)
    ADDI $a0 $zero 0x0004   -- a0 should be equal to 4
    BEQ $zero $zero 0x0005  -- always skip the next five lines
    ADDI $a0 $zero 0x0003   -- a0 should equal 3
    BNE  $v1 $a0   0x0001   -- Skip the next line if v1 != a0 (should be the case)
    BEQ  $zero $zero 0x0002 -- Always skip the next two lines
    ADDI $a1 $zero 0x0001   -- Add a1 should equal 1
    BEQ  $zero $zero 0x0001 -- Always skip the next line
    ADDI $a1 $zero 0x000C   -- a1 should equal 12 
    
    IF TEST GOES SMOOTHLY: 
        EXPECT: 
            v0 / R2 = 4
            v1 / R3 = 4
            a0 / R4 = 3
            a1 / R5 = 1


FORWARDING TEST:

    LUI $v0 0xFFFF
    ORI $v0 $v0 0xFFFF  -- Using V0 immediately
    ADD $v1 $zero $v0   
    ADD $a0 $v1 $v0     -- using V1 immediately
    SW $a0 0x0000 $zero -- Storing a0 immediately
    LW $a1 0x0000 $zero -- Loading 0x0000 immediately
    SW $a1 0x0004 $zero -- Storing a1 immediately
    LW $a2 0x0004 $zero -- Loading 0x0004 immediately
    ADDI $a3 $a2 0x0001  -- EXPECT TO FAIL (currently we do not have the proper hazard detection to handle this case)
    
    IF TEST GOES SMOOTHLY: 
            v0 / R2 = 0xFFFF_FFFF
            v1 / R3 = 0xFFFF_FFFF
            a0 / R4 = 0xFFFF_FFFE
            a1 / R5 = 0xFFFF_FFFE
            a2 / R6 = 0xFFFF_FFFE
            a3 / R7 = 0xFFFF_FFFF
        EXPECT: 
            v0 / R2 = 0xFFFF_FFFF
            v1 / R3 = 0xFFFF_FFFF
            a0 / R4 = 0xFFFF_FFFE
            a1 / R5 = 0xFFFF_FFFE
            a2 / R6 = 0xFFFF_FFFE
            a3 / R7 = 0x0001        -- Wont have time to load the word before it is used
                                    -- SHOULD STALL ONE STAGE, BUT NOT IMPLEMENTED

MEMORY TEST: (COMPLETE)

    SW r1, 32(r0)
    SW r2, 36(r0)
    SW r3, 40(r0)    
    LW r10, 32(r0)
    LW r11, 36(r0)
    LW r12, 40(r0)
    LB r10, 32(r0)
    LB r11, 36(r0)
    LBU r12, 36(r0)
    LBU r10, 40(r0)
    LBU r11, 41(r0)
    LBU r12, 42(r0)
    LBU r12, 43(r0)
    SB r4, 44(r0)
    SB r4, 45(r0)
    SB r4, 46(r0)
    SB r4, 47(r0)
    LW r12, 44(r0)
    
    IF TEST GOES SMOOTHLY:
        (see waveform)
        
		

TESTING:

	0	ADDIU R2 R2 0xF000			2442F000		//0000F000
	1	ADD	  R0 R0 R0				00000020
	2	ADD	  R0 R0 R0				00000020
	3   ADD   R0 R0 R0 				00000020	
	4   ADDU  R3 R2 R2				00421821		//0001E000
	5   SLTI  R4 R2 0xF001			2844F001		//00000000
	6   SLTIU R5 R2 0xF001			2C45F001		//00000001
	7	ORI   R6 R6 0xAAAA			34C6AAAA		//0000AAAA
	8	ADD	  R0 R0 R0				00000020
	9	ADD	  R0 R0 R0				00000020
	10  ADD   R0 R0 R0 				00000020
	11  OR    R7 R6 R5				00C53825		//0000AAAB	
	11  AND   R8 R6 R3				00C34024		//0000A000
	12  ANDI  R9 R6 0xAA55			30C9AA55		//0000AA00
	13	ADD   R0 R0 R0 				00000020		
	14  XOR   R10 R7 R6				00E65026		//00000001
	15  XORI  R11 R3 0x1111			386B1111		//0001F111
	16  NOR   R12 R3 R2				00626027		//FFFE0FFF
	17  SUBU  R13 R7 R6				00E66823		//00000001
	18  SUBU  R14 R6 R7				00C77023		//FFFFFFFF
    19  ADD   R0 R0 R0 				00000020		
	20  SLT   R15 R12 R10			018A782A		//00000001
	21  SLTU  R16 R10 R12 			014C802B		//00000001
	22  LUI   R17 0x0FFF			3C110FFF		//0FFF0000
	22  LUI   R18 0xF111			3C12F111		//F1110000
	23  SLL   R19 R9 0x0004			00099900		//000AA000
	24  SRL   R20 R9 0x0004			0009A102		//00000AA0
	25  SRA   R21 R12 0x000C		000CAB03		//FFFFFFE0
	26  SLLV  R22 R17 R13			01B1B004		//1FFE0000
	27  SRLV  R23 R18 R10			0152B806		//78888000
	28  SRAV  R24 R18 R10			0152C007		//F8888000
	29  BEQ   R10 R13 0x0002		114D0002		//TAKEN
	30  ADD   R0 R0 R0 				00000020	
	31  ORI   R25 R17 0xAAAA		3639AAAA
	32  ORI   R25 R17 0xBBBB		3639BBBB		//FFFFBBBB
	33  BNE   R12 R14 0x0002		158E0002		//TAKEN
	34  ADD   R0 R0 R0 				00000020
	35  ORI   R25 R17 0xCCCC		3639CCCC
	36  ORI   R25 R17 0xDDDD		3639DDDD		//FFFFDDDD
	37  BNE   R10 R13 0x0002		154D0002		//NOT TAKEN
	38  ADD   R0 R0 R0 				00000020
	39  ORI   R25 R17 0xEEEE		3639EEEE		//FFFFEEEE
	40  ORI   R25 R17 0xFFFF		3639FFFF		//FFFFFFFF
	41	BLEZ  R18 0x0002			1A400002		//TAKEN
	42  ADD   R0 R0 R0				00000020
	43  ORI   R25 R17 0x1111		36391111
	44  ORI   R25 R17 0x2222		36392222		//FFFF2222
	45	BLEZ  R4 0x0002				18800002		//TAKEN
	46  ADD   R0 R0 R0				00000020
	47  ORI   R25 R17 0x3333		36393333
	48  ORI   R25 R17 0x4444		36394444		//FFFF4444
	49	BLEZ  R17 0x0002			1A200002		//NOT TAKEN
	50  ADD   R0 R0 R0				00000020
	51  ORI   R25 R17 0x5555		36395555		//FFFF5555
	52  ORI   R25 R17 0x6666		36396666		//FFFF6666
	53	BGEZ  R18 0x0002			06410002		//NOT TAKEN
	54  ADD   R0 R0 R0				00000020
	55  ORI   R25 R17 0x1111		36391111		//FFFF1111
	56  ORI   R25 R17 0x2222		36392222		//FFFF2222
	57	BGEZ  R4 0x0002				04810002		//TAKEN
	58  ADD   R0 R0 R0				00000020
	59  ORI   R25 R17 0x3333		36393333	
	60  ORI   R25 R17 0x4444		36394444		//FFFF4444
	61	BGEZ  R17 0x0002			06210002		//TAKEN
	62  ADD   R0 R0 R0				00000020
	63  ORI   R25 R17 0x5555		36395555
	64  ORI   R25 R17 0x6666		36396666		//FFFF6666
	65	BGTZ  R18 0x0002			1E400002		//NOT TAKEN
	66  ADD   R0 R0 R0				00000020
	67  ORI   R25 R17 0x1111		36391111		//FFFF1111
	68  ORI   R25 R17 0x2222		36392222		//FFFF2222
	69	BGTZ  R4 0x0002				1C800002		//NOT TAKEN
	70  ADD   R0 R0 R0				00000020
	71  ORI   R25 R17 0x3333		36393333		//FFFF3333
	72  ORI   R25 R17 0x4444		36394444		//FFFF4444
	73	BGTZ  R17 0x0002			1E200002		//TAKEN
	74  ADD   R0 R0 R0				00000020
	75  ORI   R25 R17 0x5555		36395555		
	76  ORI   R25 R17 0x6666		36396666		//FFFF6666
	77	BLTZ  R18 0x0002			06400002		//TAKEN
	78  ADD   R0 R0 R0				00000020
	79  ORI   R25 R17 0x1111		36391111
	80  ORI   R25 R17 0x2222		36392222		//FFFF2222
	81	BLTZ  R4 0x0002				04800002		//NOT TAKEN
	82  ADD   R0 R0 R0				00000020
	83  ORI   R25 R17 0x3333		36393333		//FFFF3333
	84  ORI   R25 R17 0x4444		36394444		//FFFF4444
	85	BLTZ  R17 0x0002			06200002		//NOT TAKEN
	86  ADD   R0 R0 R0				00000020
	87  ORI   R25 R17 0x5555		36395555		//FFFF5555
	88  ORI   R25 R17 0x6666		36396666		//FFFF6666
	89  ADDI  R26 R26 0x8C			235A008C
	91	J 	  0x64					08000064		// JUMP TO 100
	92  ADD   R0 R0 R0				00000020
	100 ORI   R25 R17 0x1111		36391111
	101 JAL	  0x78					0C000078		// JUMP TO 120
	102 ADD   R0 R0 R0				00000020
	103 ORI   R25 R17 0x3333		36393333
	104 JALR  R27 R26				0340D809		// JUMP TO 140
	105 ADD   R0 R0 R0				00000020
	106 ORI   R25 R17 0x5555		36395555
	107 J 	  0xC8					080000C8		// JUMP TO 200
	120 ORI   R25 R17 0x2222		36392222
	121	ADD   R0 R0 R0				00000020
	122	ADD   R0 R0 R0				00000020
	123 JR    R31					03E00008		// RETURN TO 102
	140 ORI   R25 R17 0x4444		36394444
	141	ADD   R0 R0 R0				00000020
	142	ADD   R0 R0 R0				00000020
	143 JR    R27					03600008		// RETURN TO 105 
	200 ORI   R25 R17 0x6666		36396666
	201 ORI   R25 R17 0x1234		36391234 
	202 ADDI  R28 R28 0x4			239C0004
	203 ADDI  R29 R29 0x8			23BD0008
	203	ADD   R0 R0 R0				00000020
	204	ADD   R0 R0 R0				00000020 
	205	ADD   R0 R0 R0				00000020
	206 SB    R25 0x0(R4)			A0990000		//STORE 34
	207 SB    R21 0x1(R4)			A0950001		//STORE E0
	208 SB    R20 0x2(R4)			A0940002		//STORE A0
	209 SB    R14 0x3(R4)			A08E0003		//STORE FF
	210 SH    R7  0x0(R28)			A7870000		//STORE AAAB
	211 SH    R11 0x2(R28)			A78B0002		//STORE F111
	212 SW    R12 0x0(R29)			AFAC0000		//STORE FFFE0FFF
	213 LB    R30 0x0(R4)			809E0000		//LOAD 34 (SIGNED)
	213 LBU   R30 0x0(R4)			909E0000		//LOAD 34 (UNSIGNED)
	214 LB    R30 0x1(R4)			809E0001		//LOAD E0 (SIGNED)
	214 LBU   R30 0x1(R4)			909E0001		//LOAD E0 (UNSIGNED)
	215 LB    R30 0x2(R4)			809E0002		//LOAD A0 (SIGNED)
	215 LBU   R30 0x2(R4)			909E0002		//LOAD A0 (UNSIGNED)
	216 LB    R30 0x3(R4)			809E0003		//LOAD FF (SIGNED)
	216 LBU   R30 0x3(R4)			909E0003		//LOAD FF (UNSIGNED)
	217 LH    R30 0x0(R28)			879E0000		//LOAD AAAB (SIGNED)
	217 LHU   R30 0x0(R28)			979E0000		//LOAD AAAB (UNSIGNED)
	218 LH    R30 0x2(R28)			879E0002		//LOAD F111 (SIGNED)
	218 LHU   R30 0x2(R28)			979E0002		//LOAD F111 (UNSIGNED)
	219 LW    R30 0x0(R28)			8F9E0000		//LOAD F111AAAB
	220 LW    R30 0x0(R29)			8FBE0000		//LOAD FFFE0FFF
	221 J     0xE5					080000E5		//JUMP HERE FOREVER
	
 
ASSEMBLY + MACHINE CODE FOR ACTUAL DEMO PROGRAMS

    PROGRAM 1: SUM OF NUMBERS FROM 0 TO 0x100
    EXPECTED OUTPUT: R3 = 0x70807800
    
    0	addiu   r1 r0 0x0100          24010100
    1	add     r2 r0 r0              00001020
    2	add     r3 r0 r0              00001820
        
    3	add     r0 r0 r0              00000020
    4	add     r0 r0 r0              00000020
    5	add     r0 r0 r0              00000020
    
        # Main loop body
    6	addi	r2 r2 0x1	          20420001
    7	add     r0 r0 r0              00000020
    8	add     r0 r0 r0              00000020
    9	add     r0 r0 r0              00000020
    10	add     r0 r0 r0              00000020
    11	addu	r3 r3 r2	          00621821
    12	bne	    r1 r2 0xFFF9          1422FFF8
    13  add     r0 r0 r0              00000020
    14	JAL     20                    0C000013
    15  add     r0 r0 r0              00000020
    16  J       0                     08000000
    17  add     r0 r0 r0              00000020
    18  add     r0 r0 r0              00000020
    19  add     r0 r0 r0              00000020
    20  addi    r4 r0 0x01            20040001
    21  add     r0 r0 r0              00000020
    22  add     r0 r0 r0              00000020
    23  add     r0 r0 r0              00000020    
    24  sub     r2 r2 r4              00441022
    21  add     r0 r0 r0              00000020
    22  add     r0 r0 r0              00000020
    23  add     r0 r0 r0              00000020 
    25  bne     r2 r0 0xFFFC          1440FFFB
    26  add     r0 r0 r0              00000020 
    27  JR      r31                   03E00008
    
  
    
    PROGRAM 2: COUNT THE NUMBER OF 1 bits in memory from MEM LOCATION 0x0001 TO 0x010
    
    0	addi r1 r0 0x100
    1	add r2 r0 r0
    2	add r3 r0 r0
    
    
    
        
        