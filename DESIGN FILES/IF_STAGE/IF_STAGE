library IEEE;
use IEEE.STD_LOGIC_1164.all;		
use IEEE.numeric_std.all;

use work.constants_pkg.all;

entity IF_STAGE is
	port( 
		--INPUTS
     	CLK			    : in STD_LOGIC;					
		RESET			: in STD_LOGIC;		
					
     					     	
		PC_OFFSETED     : in STD_LOGIC_VECTOR (INST_SIZE-1 downto 0);	
		BRANCH_SIG	    : in STD_LOGIC_VECTOR (1 downto 0);
		NEW_PC          : in STD_LOGIC_VECTOR (INST_SIZE-1 downto 0);
		BR_COMP         : in STD_LOGIC; 	      
		
		--OUTPUTS	(REGISTERED)		
		MEM_DATA_O		: out STD_LOGIC_VECTOR(INST_SIZE-1 downto 0);
		PC_o         : out STD_LOGIC_VECTOR(INST_SIZE-1 downto 0)
		
	);
end IF_STAGE;



architecture IF_ARCH of IF_STAGE is

    signal PC_ADDR: std_logic_vector (INST_SIZE-1 downto 0) := (others => '0');
    signal PC_INCd: std_logic_vector (INST_SIZE-1 downto 0);
    signal PC_next_ctl: std_logic;

-- COMPONENT DECLARATIONS
    component IF_INSTRUCTMEM is
	   port(
	       RESET     : in  std_logic;
		   CLK       : in  std_logic;
		   ADDR      : in  std_logic_vector(INST_SIZE-1 downto 0);
		   DATA_O    : out std_logic_vector(INST_SIZE-1 downto 0)
	);
    end component IF_INSTRUCTMEM;

    component INCREMENTER is
        port(
           ADDR  : in  std_logic_vector(INST_SIZE-1 downto 0);
           SUM   : out std_logic_vector(INST_SIZE-1 downto 0)
            );
    end component INCREMENTER;
    
    component IF_STAGE_R is
        port(
           CLK          : in STD_LOGIC;
           RESET        : in STD_LOGIC;
           PC_INCd_i      : in STD_LOGIC_VECTOR (INST_SIZE-1 downto 0);
           PC_INCd_O      : out STD_LOGIC_VECTOR (INST_SIZE-1 downto 0)
            );
    end component IF_STAGE_R;  

-- SIGNAL DECLARATIONS
begin
    PC_next_ctl <= not branch_sig(0) and not branch_sig(1) and not br_comp;
    
    -- COMPONENT INSTANTIATION
    MEM_BANK: IF_INSTRUCTMEM
        PORT MAP(
            RESET     => RESET,
            CLK       => CLK,
            ADDR      => PC_ADDR,
            DATA_O    => MEM_DATA_O
    );
    
    INCREMETER: INCREMENTER
        PORT MAP(
            ADDR => PC_ADDR,
            SUM => PC_INCd 
          );
     OUTPUT_REG: IF_STAGE_R
        PORT MAP(
           CLK => CLK,
           RESET => RESET,
           PC_INCd_i => PC_INCd,
           PC_INCd_O => PC_o
         );
              
       
       process (CLK, PC_ADDR, PC_INCd, RESET)
       begin
       
        if (RESET='1') then
            PC_ADDR <= (others => '0');
            
        elsif (falling_edge(RESET)) then
            PC_ADDR <= NEW_PC;
       
        elsif (rising_edge(CLK)) then
        
            if (PC_next_ctl = '1') then
                PC_ADDR <= PC_OFFSETED;
            else 
                PC_ADDR <= PC_INCd;
                
            end if;
            
        end if;
        
        end process;
           
end IF_ARCH;
