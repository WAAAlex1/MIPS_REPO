library IEEE;
use IEEE.STD_LOGIC_1164.all;		
use IEEE.numeric_std.all;

library work;
use work.records.all;
use work.constants_pkg.all;

entity TOP_LEVEL is
port(
    -- INPUTS GENERATED BY BOARD
    CLK: in STD_LOGIC;
    -- INPUTS FROM IO
    SWITCHES: in STD_LOGIC_VECTOR(15 DOWNTO 0);
    BTN: in STD_LOGIC;
    
    -- OUTPUTS TO IO ( 7-SEGMENT AND LEDS)
    LEDS:  out STD_LOGIC_VECTOR(15 DOWNTO 0);
    SEV_SEG_DATA: out STD_LOGIC_VECTOR(27 DOWNTO 0);
    SEV_SEG_CTRL: out STD_LOGIC_VECTOR(3 DOWNTO 0)
);
end TOP_LEVEL;

architecture ARCH_TOP of TOP_LEVEL is

-- DECLARE COMPONENTS

-- 7-SEGMENT DRIVER:
component SEVEN_SEG_DRIVER is
	port(
		clk:   in  std_logic;
		data:  in  std_logic_vector(15 downto 0);
		ano:   out std_logic_vector(4 downto 1);
		seg_out: out std_logic_vector(27 downto 0)
	);
end component SEVEN_SEG_DRIVER;

-- PROCESSOR_TOP:
component PROCESSOR_TOP is
    port(
        CLK: in STD_LOGIC;
        RESET: in STD_LOGIC;
        PROG_SEL: in STD_LOGIC_VECTOR(1 DOWNTO 0);
        
        REGISTERS: out REG_ARR
    );
end component PROCESSOR_TOP;

-- DEFINE INTERNAL SIGNALS
signal SWITCHES_INT: integer;

--SIGNALS FOR METASTABILITY SYNCHRONIZER OF RESET DEPRESS
signal BTN_0: STD_LOGIC;
signal BTN_1: STD_LOGIC;
signal BTN_2: STD_LOGIC;

--SIGNALS FOR METASTABILITY SYNCHRONIZER OF SWITCHES
signal SWITCHES_0: STD_LOGIC_VECTOR(15 DOWNTO 0);
signal SWITCHES_1: STD_LOGIC_VECTOR(15 DOWNTO 0);
signal SWITCHES_2: STD_LOGIC_VECTOR(15 DOWNTO 0);

--SIGNALS FOR SEVEN SEG
signal SEVEN_SEG_DRIVER_DATA: STD_LOGIC_VECTOR(15 DOWNTO 0);
signal SEVEN_SEG_DATA_ENC: STD_LOGIC_VECTOR(27 DOWNTO 0);
signal SEVEN_SEG_CTRL_ENC: STD_LOGIC_VECTOR(3 DOWNTO 0);

-- SIGNALS FOR PROCESSOR_TOP
signal REGISTERS: REG_ARR;
signal RESET: STD_LOGIC;
signal P_SEL: STD_LOGIC_VECTOR(1 DOWNTO 0);
signal CLOCK: STD_LOGIC;
signal CLOCK_SEL: STD_LOGIC;
signal CLOCK_SLOW: STD_LOGIC;
signal COUNT: UNSIGNED(25 downto 0); -- FACTOR OF 50.000.000 NEEDED.
signal CLK_ENABLE_1: STD_LOGIC;
signal CLK_ENABLE_2: STD_LOGIC;
signal CLK_ENABLE_3: STD_LOGIC;
signal CLK_ENABLE_4: STD_LOGIC;
signal CLK_ENABLE_SYNC: STD_LOGIC;

begin
-- RESET METASTABILITY SYNCHRONIZER
process(clk, BTN)
begin
    if rising_edge(clk) then
        BTN_0 <= BTN;
        BTN_1 <= BTN_0;
        BTN_2 <= BTN_1;
    end if;
end process;
RESET <= BTN OR BTN_2;

-- SWITCHES METASTABILITY SYNCHRONIZER
process(clk, SWITCHES)
begin
    if rising_edge(clk) then
        SWITCHES_0 <= SWITCHES;
        SWITCHES_1 <= SWITCHES_0;
        SWITCHES_2 <= SWITCHES_1;
    end if;
end process;
SWITCHES_INT <= TO_INTEGER(unsigned(SWITCHES_2(4 DOWNTO 0)));

-- OUTPUT ASSIGNMENTS
P_SEL <= SWITCHES_2(15 DOWNTO 14);
LEDS <= REGISTERS(SWITCHES_INT)(15 DOWNTO 0); -- LEDS HOLDS BITS 15-0 OF CHOSEN REGISTER
SEV_SEG_DATA <= SEVEN_SEG_DATA_ENC;
SEV_SEG_CTRL <= SEVEN_SEG_CTRL_ENC;

-- SELECT WHICH DATA IS PUT ON 7-SEGMENT
SEVEN_SEG_DRIVER_DATA <= REGISTERS(SWITCHES_INT)(31 DOWNTO 16); -- 7-SEG HOLDS BITS 31-16 OF CHOSEN REGISTER

-- PORT MAP COMPONENTS

-- SEVEN_SEG_DRIVER
SEV_SEG_DRIVER: SEVEN_SEG_DRIVER port map(
        clk       => CLK,
		data      => SEVEN_SEG_DRIVER_DATA,
		ano       => SEVEN_SEG_CTRL_ENC,
		seg_out   => SEVEN_SEG_DATA_ENC
);

-- PROCESSOR_TOP
MIPS_TOP: PROCESSOR_TOP port map(
        CLK         => CLOCK,
        RESET       => RESET,
        PROG_SEL    => P_SEL,
        
        REGISTERS   => REGISTERS
);

Process(CLK)
begin
    if rising_edge(clk) then
        if(COUNT = 50000000) then
            COUNT <= TO_UNSIGNED(0, 26);
            CLK_SLOW <= not CLK_SLOW;
        else
            COUNT <= COUNT+1;
        end if;     
    end if;
end process;

CLOCK_SEL <= CLK when SWITCHES_2(9) = '0' else CLK_SLOW;

Process(CLOCK_SEL)
begin
    if rising_edge(CLOCK_SEL) then
        CLK_ENABLE_1 <= SWITCHES(8);
        CLK_ENABLE_2 <= CLK_ENABLE_1;
        CLK_ENABLE_3 <= CLK_ENABLE_2;
        CLK_ENABLE_4 <= CLK_ENABLE_3;
        CLK_ENABLE_SYNC <= CLK_ENABLE_4;
    end if;
end process;    

CLOCK <= CLOCK_SEL when CLK_ENABLE_SYNC = '1' else '0';

end ARCH_TOP;
